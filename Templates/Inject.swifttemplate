<%-  includeFile("Inject.swift")  %>
<%_
    /// HEADER

    let imports: [String]!

    if let _imports = (argument["imports"] as? [String]) {
      imports =  _imports
    } else if let _import = argument["imports"] as? String {
         imports = [_import]
    } else {
       imports =  []
    } 


    let testImports: [String]!
    if let _imports = (argument["testImports"] as? [String]) {
      testImports =  _imports
    } else if let _import = argument["testImports"] as? String {
      testImports = [_import]
    } else {
       testImports =  []
    } 

func outputInjectFunction(injectorType :String, 
                          parentType: String, 
                          injectorProperties: [String: [Property]], 
                          useInjectorString: Bool, 
                          initializerParams: [(String?, String)],
                          injectDirectly: Bool, 
                          injectableName: String, 
                          protocolName: String, 
                          addMock: Bool,
                          isHelper: Bool = false) {
  let targetProperties = sorted(injectorProperties[injectorType] ?? [])
  let sourceProperties = injectorProperties[parentType] ?? []
  var injectorMappings: [String: String] = [:]

  log("------------------------------------------------------\n")
  log("\(parentType) -> \(injectorType) mappings:\n")
  targetProperties.forEach({targetProperty in 
    if let sourceProperty = resolvePropertyFromSource(
        property: targetProperty,
        allProperties: targetProperties,
        sourceProperties: sourceProperties
    ) {
      log("\(targetProperty.name) -> \(parentType):\(sourceProperty.name)\n")
      injectorMappings[targetProperty.name] = sourceProperty.name
    } else {
      log("\(targetProperty.name) -> ARGUMENT\n")
    } 
  }) 
  let arguments = targetProperties.filter({injectorMappings[$0.name] == nil})

  //Inject dependencies directly
  if injectDirectly {  
    %>
    func inject<% if isHelper { %>Impl<% } %>(<%= arguments.map({"\($0.name): \($0.type)"}).joined(separator: ", ") %>) -> <% if isHelper { %><%= injectableName %><% } else { %><%= protocolName %><% } %> {
     
     return <% if addMock && !isHelper {%><% if useInjectorString {%> injector.<% }%>mock?.mock<%= protocolName %> ??<% } %> <%= injectableName %>(injector: <%= injectorType %>Impl(<% if addMock {%>mock: <% if useInjectorString {%> injector.<% }%>mock<% if targetProperties.count > 0 { %>,<%}%><% } %>
        <%= targetProperties.map({target in let mapping = injectorMappings[target.name].map({source in useInjectorString ? "injector.\(source)" : source}); return "\(target.name): \(mapping ?? target.name)"}).joined(separator: ",\n      ") %>
      ))
    }
    <%
  } else {
%>
    func inject(<%= arguments.map({"\($0.name): \($0.type)"}).joined(separator: ", ") %>) -> <%= injectorType %>Impl {
      return <%= injectorType %>Impl(
        <%= targetProperties.map({target in let mapping = injectorMappings[target.name].map({source in useInjectorString ? "injector.\(source)" : source}); return "\(target.name): \(mapping ?? target.name)"}).joined(separator: ",\n      ") %>
      )
    }
    <%
  }
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////MAIN ROUTINE/////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  let injectDirectly = argument["legacyInjection"] == nil
  let addMocks = argument["noMocks"] == nil
  let injectData = calculateInjectData()
-%>
<% if addMocks { %>
// sourcery:file:InjectGrail/Mock.swift
import Foundation
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>

class InjectGrailMock {
<% for type in injectData.injectables { let type = protocolName(type.name, data: injectData) -%>
  var mock<%= type %>: <%= type %>? = nil
<% } %>
init() {}
}
// sourcery:end
<% } %>
// sourcery:file:InjectGrail/RootInjector.swift
import Foundation
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>

//Extension of RootInject which contains definition of `inject` functions creating all other Injectors.
extension <%=  injectData.rootInjector.name %> {
<%_  for type in injectData.injectors{
    if injectDirectly {
        injectData.injectorsToInjectables[type.name]?.forEach {injectableName in
          for initializerParams in injectData.injectablesToInitializers[injectableName] ?? [] {
            outputInjectFunction(injectorType: type.name, 
                                parentType: "RootInjector", 
                                injectorProperties: injectData.injectorProperties,
                                useInjectorString: false,
                                initializerParams: initializerParams, 
                                injectDirectly: true, 
                                injectableName: injectableName, 
                                protocolName: protocolName(injectableName, data: injectData), 
                                addMock: addMocks)
          }
        }
    } else {
      outputInjectFunction(injectorType: type.name, parentType: "RootInjector", injectorProperties: injectData.injectorProperties, useInjectorString: false, initializerParams: [], injectDirectly: false, injectableName: type.name, protocolName: "", addMock: addMocks)
    }
    } %>
}
// sourcery:end
<% if injectDirectly {%>
// sourcery:file:InjectGrail/TestHelpers.swift
import Foundation
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>
<%_ for `import` in testImports { -%>
<%= `import` %>
<%_ } -%>

//Extension of RootInject which contains helper injectors.
extension <%=  injectData.rootInjector.name %> {
<%_  for type in injectData.injectors{
    injectData.injectorsToInjectables[type.name]?.forEach {injectableName in
      for initializerParams in injectData.injectablesToInitializers[injectableName] ?? [] {
        outputInjectFunction(injectorType: type.name, parentType: "RootInjector", injectorProperties: injectData.injectorProperties, useInjectorString: false, initializerParams: initializerParams, injectDirectly: true, injectableName: injectableName, protocolName: protocolName(injectableName, data:injectData), addMock: addMocks, isHelper: true)
      }
    }
  } %>
}
// sourcery:end
<% } %>
// sourcery:file:InjectGrail/Injectors.swift
import Foundation
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>

<%_
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Print injectors

for type in injectData.injectors{ -%>
//MARK: - <%= type.name %>
//Actual implementation of <%= type.name %> which includes all dependencies found in RootInjector and required by this injector's children.
struct <%= type.name %>Impl: <%= type.name %> {
  <% if addMocks && injectData.injectorProperties[type.name]?.allSatisfy({$0.name != "mock"}) ?? false { %> let mock: InjectGrailMock? <%}%>
  <%_ for property in sorted(injectData.injectorProperties[type.name] ?? []) { %>
  let <%= property.name%>: <%= property.type -%>
<%  } %>
}

<%_ } -%>
// sourcery:end
// sourcery:file:InjectGrail/Injectables.swift
import Foundation
<%_ for `import` in imports { -%>
import <%= `import` %>
<%_ } -%>

<%_ 

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Print inject extensions and protocols
for type in injectData.injectables { -%>
<% guard let injector = injectData.injectablesToInjectors[type.name] else { fatalError("Injector not found for \(type.name)") } %>
<% let childInjects = (injectData.injectablesToInjects[type.name] ?? [])  %>
// MARK: - <%= type.name %>
// This extension contains `inject` functions of Injectors injected by <%= type.name %>.
// That is <%= childInjects.joined(separator: ", ") %>.
// Based on the conforming to <%= childInjects.joined(separator: ", ") %>
// and  proxy variables that makes properties of <%= injector %> visible in <%= type.name %>.
extension <%= type.name %> {
<%
  let properties = sorted(injectData.injectorProperties[injector] ?? [])
  for property in properties { %> var <%= property.name %>: <%= property.type %> { return injector.<%= property.name %> } 
<%}
  for injects in childInjects { 
      guard let childInjector = injectData.injectsToInjectors[injects] else { fatalError("Child injector not found for \(injects)") }
      if injectDirectly {
        injectData.injectorsToInjectables[childInjector]?.forEach {injectableName in
          for initializerParams in injectData.injectablesToInitializers[injectableName] ?? [] {
            outputInjectFunction(injectorType: childInjector, parentType: injector, injectorProperties: injectData.injectorProperties, useInjectorString: true, initializerParams: initializerParams, injectDirectly: true, injectableName: injectableName, protocolName: protocolName(injectableName, data: injectData), addMock: addMocks)
          }
        }
      } else {
        outputInjectFunction(injectorType: childInjector, parentType: injector, injectorProperties: injectData.injectorProperties, useInjectorString: true, initializerParams: [], injectDirectly: false, injectableName: childInjector, protocolName: childInjector,  addMock: addMocks)
      }
    %>
     
  <% } -%>
}

//Classes that want to inject objects of <%= type.name %> should confom to this protocol. 
//InjectGrail will extend their implementations with `inject` functions creating `<%= type.name %>Injector`
protocol Injects<%= injector %> {}

<%_ }
 -%>
// sourcery:end
